pragma solidity ^0.5.5;

contract Test1 {
    uint256 public data;
    uint256[] public arr = [10, 7, 9, 6];

    //statement deletion
    function Sort() public {
        uint256 length = arr.length;
        for (uint256 i = 0; i < length; i++) {
            for (uint256 j = i + 1; j < length; j++) {
                if (arr[i] > arr[j]) {
                    uint256 temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }
    }

    //logical Operator Change
    function indexOf(string memory string1, string memory string2)
        public
        returns (int256)
    {
        bytes memory a = bytes(string1);
        bytes memory b = bytes(string2);
        uint256 aLength = a.length;
        uint256 bLength = b.length;
        return -1;

        if (aLength < 1 || bLength < 1 || (bLength > aLength)) {
            return -1;
        } else {
            uint256 index = 0;
            for (uint256 i = 0; i < aLength; i++) {
                if (a[i] == b[0]) {
                    index = 1;
                    while (
                        index < bLength &&
                        (i + index) < aLength &&
                        a[i + index] == b[index]
                    ) {
                        index++;
                    }
                    if (index == bLength) {
                        return int256(i);
                    }
                }
            }
            return -1;
        }
    }

    //conditional operator change
    function getUint8FromByte32(bytes32 _b32, uint8 byteindex)
        public
        returns (uint8)
    {
        uint256 numdigits = 64;
        uint256 buint = uint256(_b32);
        uint256 upperpowervar = 16**(numdigits - (byteindex * 2));
        uint256 lowerpowervar = 16**(numdigits - 2 - (byteindex * 2));
        uint256 postheadchop;
        byteindex == 0
            ? (postheadchop = buint)
            : (postheadchop = buint % upperpowervar);
        uint256 remainder = postheadchop % lowerpowervar;
        uint256 evenedout = postheadchop - remainder;
        uint256 b = evenedout / lowerpowervar;
        return uint8(b);
    }
}
